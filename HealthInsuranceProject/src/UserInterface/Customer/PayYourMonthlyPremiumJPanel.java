/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;

import Business.PaymentPlan.PaymentPlan;
import Business.Transaction.Transaction;
import Business.UserAccount;
import java.awt.CardLayout;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Haripal
 */
public class PayYourMonthlyPremiumJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PayYourMonthlyPremiumJPanel
     */
    JPanel UserProcessContainer;
    UserAccount userAccount;
    double D = 0.0;
    double h  =  0.0;
    Date date;
    Date date1;
    ArrayList<Date> dates;
    public PayYourMonthlyPremiumJPanel(JPanel UserProcessContainer,UserAccount userAccount) {
        initComponents();
        this.UserProcessContainer = UserProcessContainer;
        this.userAccount = userAccount;
        monthjComboBox.removeAllItems();
        dates = new ArrayList<Date>();
    
        comboRefresh();
        
         pendingRefresh();
        //dateRefresh();
        
        
        
    }
    DecimalFormat df = new DecimalFormat("#.##");
    public void pendingRefresh()
    {
        for(PaymentPlan p : userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule())
        {
            
            if(p.getStatus().equals("Not Paid")|| p.getStatus().equals("Partially Paid"))
            {
                double tempD = p.getInstallment();
                 D = D + tempD;
                 System.out.println(D);
                
            }
        }
        
        
        
       // pendingAmountjTextField.setText(String.valueOf(df.format(userAccount.getCustomer().getPaymentSchedule().getDueAmount())));
        pendingAmountjTextField.setText(String.valueOf(df.format(D)));
    }
    
    public void comboRefresh()
    {
        monthjComboBox.removeAllItems();
        
        for(PaymentPlan p : userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule())
        {
            
            if(p.getStatus().equals("Not Paid")|| p.getStatus().equals("Partially Paid"))
            {
            
            monthjComboBox.addItem(p);
            }
           
        }
    }
    
    public void dateRefresh()
    {
         for(PaymentPlan ppp: userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule())
        {
            if(ppp.getStatus().equals("Not Paid") || ppp.getStatus().equals("Partially Paid"))
            {
                 
                try {
                   date1 = new SimpleDateFormat("MMM/dd/yyyy", Locale.ENGLISH).parse(ppp.getDate());
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null, "Not in Format");
                    return;
                }
                
                dates.add(date1);
                    
                }
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDayChooser1 = new com.toedter.calendar.JDayChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pendingAmountjTextField = new javax.swing.JTextField();
        amountjTextField = new javax.swing.JTextField();
        payjButton = new javax.swing.JButton();
        backjButton = new javax.swing.JButton();
        monthjComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        insjTextField = new javax.swing.JTextField();
        getjButton = new javax.swing.JButton();
        viewYourInvoicejButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Pay your Monthly Bill");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 32, -1, -1));

        jLabel2.setText("Due Date");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 75, -1, -1));

        jLabel3.setText("Amount");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 115, -1, -1));

        jLabel4.setText("Your Pending Amount");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 70, -1, -1));

        pendingAmountjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendingAmountjTextFieldActionPerformed(evt);
            }
        });
        add(pendingAmountjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 67, 74, -1));
        add(amountjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(231, 112, 98, -1));

        payjButton.setText("Pay");
        payjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payjButtonActionPerformed(evt);
            }
        });
        add(payjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 265, 117, -1));

        backjButton.setText("Back >>");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });
        add(backjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 329, 117, -1));

        add(monthjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(231, 67, 98, -1));

        jLabel5.setText("Installment Amount");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(422, 115, -1, -1));
        add(insjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 112, 74, -1));

        getjButton.setText("Get");
        getjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getjButtonActionPerformed(evt);
            }
        });
        add(getjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(339, 66, 57, -1));

        viewYourInvoicejButton.setText("View Your Invoice");
        viewYourInvoicejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewYourInvoicejButtonActionPerformed(evt);
            }
        });
        add(viewYourInvoicejButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 200, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void pendingAmountjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendingAmountjTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pendingAmountjTextFieldActionPerformed

    private void payjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payjButtonActionPerformed
        // TODO add String q 
        PaymentPlan selectedPaymentPlan = (PaymentPlan)monthjComboBox.getSelectedItem();
        try {
            //MM/dd/yyyy HH:mm:ss
             date = new SimpleDateFormat("MMM/dd/yyyy", Locale.ENGLISH).parse(selectedPaymentPlan.getDate());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Not in Format");
            return;
        }
        
         Calendar cal3 = Calendar.getInstance();
        Calendar cal2 = Calendar.getInstance();
        if(userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule().size() == 12)
        {
        cal2.add(Calendar.DAY_OF_YEAR, 29);
        }
        else if(userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule().size() == 24)
        {
             cal2.add(Calendar.DAY_OF_YEAR, 14);
        }
       
           
           if (!( date.compareTo(cal3.getTime()) == 0 || date.compareTo(cal2.getTime())<0))
           {
               JOptionPane.showMessageDialog(null, "You are not allowed to pay now");
                    return;
           }
        
           dateRefresh();
           for(Date d : dates)
           {
               if(d.compareTo(date)< 0)
               {
                    JOptionPane.showMessageDialog(null, "First Pay Previous dues");
                    return;
               }
           }
           
          
//              Calendar cal = Calendar.getInstance();
//        
//        cal.add(Calendar.DAY_OF_YEAR, );
//           
//           if()
//        
        
//        for(PaymentPlan ppp: userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule())
//        {
//            if(!ppp.getStatus().equals("Not Paid") && ppp.getStatus().equals("Partially Paid"))
//            {
//                 
//                try {
//                   date1 = new SimpleDateFormat("MMM/dd/yyyy HH:mm:ss", Locale.ENGLISH).parse(ppp.getDate());
//                } catch (ParseException ex) {
//                    JOptionPane.showMessageDialog(null, "Not in Format");
//                    return;
//                }
//                
//                if( date.before(date1))
//                {
//                    JOptionPane.showMessageDialog(null, "First Pay Previous dues");
//            return;
//                    
//                }
//            }
//           
//                
//                
//        }
//        
//        for(PaymentPlan ppp: userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule())
//        {
//            if(ppp.getStatus().equals("Not Paid") || ppp.getStatus().equals("Partially Paid"))
//            {
//                 
//                try {
//                   date1 = new SimpleDateFormat("MMM/dd/yyyy HH:mm:ss", Locale.ENGLISH).parse(ppp.getDate());
//                } catch (ParseException ex) {
//                    JOptionPane.showMessageDialog(null, "Not in Format");
//                    return;
//                }
//                if( date.after(date1))
//                {
//                    JOptionPane.showMessageDialog(null, "First Pay Previous dues");
//            return;
//                    
//                }
//            }
//           
//                
//                
//        }
        
        
        if(selectedPaymentPlan.getInstallment() == 0)
        {
            JOptionPane.showMessageDialog(null, "No due amount");
            return;
            
        }
        if(amountjTextField.getText().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "please enter amount");
        }
        else
        {
        try{
            Double.parseDouble(amountjTextField.getText());
        }catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "Amount must be numeric");
            return;
        }
        
      
      
      if(Double.parseDouble(amountjTextField.getText()) == selectedPaymentPlan.getInstallment() )
      {
      Calendar cal1 = Calendar.getInstance();
      SimpleDateFormat formatter= new SimpleDateFormat("yyyy/MMM/dd HH:mm:ss");
        String dateNow = formatter.format(cal1.getTime());
      Transaction transaction = selectedPaymentPlan.getTransactionHistory().newTransaction();
      transaction.setPaymentPlan(selectedPaymentPlan);
      transaction.setAmount(Double.parseDouble(amountjTextField.getText()));
      transaction.setPaidDate(dateNow);
      transaction.setCustomer(userAccount.getCustomer());
      selectedPaymentPlan.setStatus("Paid");
      selectedPaymentPlan.setInstallment(selectedPaymentPlan.getInstallment()-Double.parseDouble(amountjTextField.getText()));
      
      }
      else if(Double.parseDouble(amountjTextField.getText()) < selectedPaymentPlan.getInstallment())
      {
        Transaction transaction = selectedPaymentPlan.getTransactionHistory().newTransaction();
      transaction.setPaymentPlan(selectedPaymentPlan);
      transaction.setAmount(Double.parseDouble(amountjTextField.getText()));
      transaction.setCustomer(userAccount.getCustomer());
        selectedPaymentPlan.setStatus("Partially Paid");  
        selectedPaymentPlan.setInstallment(selectedPaymentPlan.getInstallment()-Double.parseDouble(amountjTextField.getText()));
        Calendar cal = Calendar.getInstance();
      SimpleDateFormat formatter= new SimpleDateFormat("yyyy/MMM/dd HH:mm:ss");
        String dateNow = formatter.format(cal.getTime());
        transaction.setPaidDate(dateNow);
      }
      else if(Double.parseDouble(amountjTextField.getText()) > selectedPaymentPlan.getInstallment())
      {
         Transaction transaction = selectedPaymentPlan.getTransactionHistory().newTransaction();
      transaction.setPaymentPlan(selectedPaymentPlan);
      transaction.setAmount(Double.parseDouble(amountjTextField.getText()));
      transaction.setCustomer(userAccount.getCustomer());
        selectedPaymentPlan.setStatus("Paid");  
       // selectedPaymentPlan.setInstallment(selectedPaymentPlan.getInstallment()-Double.parseDouble(amountjTextField.getText()));
        selectedPaymentPlan.setInstallment(0.0);
        
        Calendar cal = Calendar.getInstance();
      SimpleDateFormat formatter= new SimpleDateFormat("yyyy/MMM/dd HH:mm:ss");
        String dateNow = formatter.format(cal.getTime());
        transaction.setPaidDate(dateNow);
        for(PaymentPlan p : userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule())
        {
            if(p.getStatus().equals("Not Paid") || p.getStatus().equals("Partially Paid"))
            {
                h++;
                System.out.println(h);
            }
        }
            
        for(PaymentPlan p : userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule())
        {
            
            double f = userAccount.getCustomer().getPaymentSchedule().getPaymentSchedule().size();
            if(p.getStatus().equals("Not Paid"))
            {
                p.setInstallment((Double.parseDouble(pendingAmountjTextField.getText())-Double.parseDouble(amountjTextField.getText()))/(h));
          //  monthjComboBox.addItem(p);
            }
           
        }
        
          
        
      }
                  
      
          
     
      
      
      pendingAmountjTextField.setText((String.valueOf(df.format(Double.parseDouble(pendingAmountjTextField.getText()) - Double.parseDouble(amountjTextField.getText())))));
      JOptionPane.showMessageDialog(null, "Installment Paid");
      
      
      comboRefresh();
      dateRefresh();
    }//GEN-LAST:event_payjButtonActionPerformed
    }
    private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed
        // TODO add your handling code here:
        UserProcessContainer.remove(this);
        CardLayout cardLayout =(CardLayout)UserProcessContainer.getLayout();
        cardLayout.previous(UserProcessContainer);
    }//GEN-LAST:event_backjButtonActionPerformed

    private void getjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getjButtonActionPerformed
        // TODO add your handling code here:
        PaymentPlan selectedPaymentPlan = (PaymentPlan)monthjComboBox.getSelectedItem();
        insjTextField.setText(String.valueOf(df.format(selectedPaymentPlan.getInstallment())));
    }//GEN-LAST:event_getjButtonActionPerformed

    private void viewYourInvoicejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewYourInvoicejButtonActionPerformed
        // TODO add your handling code here:
        ViewInvoicesJPanel viewInvoicesJPanel  = new ViewInvoicesJPanel(UserProcessContainer,userAccount.getCustomer().getInvoice(),userAccount);
        UserProcessContainer.add("Customer Invoice",viewInvoicesJPanel);
        CardLayout cardLayout = (CardLayout)UserProcessContainer.getLayout();
        cardLayout.next(UserProcessContainer);
    }//GEN-LAST:event_viewYourInvoicejButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountjTextField;
    private javax.swing.JButton backjButton;
    private javax.swing.JButton getjButton;
    private javax.swing.JTextField insjTextField;
    private com.toedter.calendar.JDayChooser jDayChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox monthjComboBox;
    private javax.swing.JButton payjButton;
    private javax.swing.JTextField pendingAmountjTextField;
    private javax.swing.JButton viewYourInvoicejButton;
    // End of variables declaration//GEN-END:variables
}
